name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  linux:
    name: Linux ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]

    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build nasm \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Install GStreamer
        env:
          TARGET: ${{ matrix.target }}
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad \
            gstreamer1.0-plugins-ugly \
            gstreamer1.0-libav \
            libgstrtspserver-1.0-dev \
            libges-1.0-dev \
            libgstreamer-plugins-bad1.0-dev \
            pkg-config

          if [[ "$TARGET" == "x86_64-unknown-linux-gnu" ]]; then
            echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          elif [[ "$TARGET" == "aarch64-unknown-linux-gnu" ]]; then
            echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
            echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
          fi

      - name: Run FoundationDB setup
        run: bash ./bash/foundationDB.sh

      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Configure Cargo for Cross
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p .cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> .cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml

      - name: Run Clippy
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          rustup component add clippy
          cargo clippy --all-targets --no-default-features --features "rt-glommio db-fdb net-h1-server net-h2-server net-h3-server" -- -D warnings

      - name: Build
        run: cargo build --release --target=${{ matrix.target }} --no-default-features --features "rt-glommio db-fdb net-h1-server net-h2-server net-h3-server"

      - name: Test
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo test --release --no-default-features --features "rt-glommio db-fdb net-h1-server net-h2-server net-h3-server"

  windows:
    name: Windows x86_64
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install ninja nasm -y

      - name: Install GStreamer
        run: |
          Invoke-WebRequest -Uri https://gstreamer.freedesktop.org/data/pkg/windows/1.26.2/msvc/gstreamer-1.0-msvc-x86_64-1.26.2.msi -OutFile gstreamer.msi
          Invoke-WebRequest -Uri https://gstreamer.freedesktop.org/data/pkg/windows/1.26.2/msvc/gstreamer-1.0-devel-msvc-x86_64-1.26.2.msi -OutFile gstreamer-devel.msi
          Start-Process msiexec.exe -Wait -ArgumentList '/i gstreamer.msi /quiet /norestart'
          Start-Process msiexec.exe -Wait -ArgumentList '/i gstreamer-devel.msi /quiet /norestart'
          echo "C:\\gstreamer\\1.0\\msvc_x86_64\\bin" | Out-File -Append $env:GITHUB_PATH

      - name: Setup Rust
        run: |
          rustup default stable
          rustup component add clippy

      - name: Run Clippy
        run: cargo clippy --all-targets --no-default-features --features "rt-tokio net-h1-server net-h2-server" -- -D warnings

      - name: Build
        run: cargo build --release --no-default-features --features "rt-tokio net-h1-server net-h2-server"

      - name: Test
        run: cargo test --release --no-default-features --features "rt-tokio net-h1-server net-h2-server"

  android:
    name: Android ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          [armv7-linux-androideabi, aarch64-linux-android, x86_64-linux-android]

    steps:
      - uses: actions/checkout@v4

      - name: Add Android target
        run: rustup target add ${{ matrix.target }}

      - name: Install NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25b
          add-to-path: true

      - name: Install cargo-ndk
        run: cargo install cargo-ndk

      - name: Build
        run: cargo ndk -t ${{ matrix.target }} -o ./target build --release

  apple:
    name: Apple (macOS & iOS)
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: brew install ninja

      - name: Install GStreamer
        run: |
          curl -O https://gstreamer.freedesktop.org/data/pkg/osx/1.26.2/gstreamer-1.0-1.26.2-universal.pkg
          curl -O https://gstreamer.freedesktop.org/data/pkg/osx/1.26.2/gstreamer-1.0-devel-1.26.2-universal.pkg
          sudo installer -pkg gstreamer-1.0-1.26.2-universal.pkg -target /
          sudo installer -pkg gstreamer-1.0-devel-1.26.2-universal.pkg -target /
          echo "PATH=/Library/Frameworks/GStreamer.framework/Versions/1.0/bin:$PATH" >> $GITHUB_ENV

      - name: Run FoundationDB setup
        run: bash ./bash/foundationDB.sh

      - name: Setup Rust
        run: |
          rustup default stable
          rustup component add clippy
          rustup target add aarch64-apple-darwin
          rustup target add aarch64-apple-ios

      - name: Run Clippy
        run: cargo clippy

      - name: Build for macOS (arm64)
        run: cargo build --release --target=aarch64-apple-darwin

      - name: Build for iOS (staticlib)
        run: |
          cargo install cargo-lipo
          cargo lipo --release --targets=aarch64-apple-ios
