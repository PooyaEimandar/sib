name: Sib - Cross-Platform Build CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        # os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            cmake_compiler_options: >
              -DCMAKE_C_COMPILER=clang
              -DCMAKE_CXX_COMPILER=clang++
              -DCMAKE_BUILD_TYPE=Release
          # - os: windows-latest
          #   cmake_compiler_options: >
          #     -DCMAKE_C_COMPILER=clang-cl
          #     -DCMAKE_CXX_COMPILER=clang-cl
          #     -DCMAKE_BUILD_TYPE=Release
          # - os: macos-latest
          #   cmake_compiler_options: >
          #     -DCMAKE_C_COMPILER=clang
          #     -DCMAKE_CXX_COMPILER=clang++
          #     -DCMAKE_BUILD_TYPE=Release

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake clang ccache

      # - name: Install Dependencies (macOS)
      #   if: runner.os == 'macOS'
      #   run: |
      #     brew install ninja cmake llvm ccache

      # - name: Install Dependencies (Windows)
      #   if: runner.os == 'Windows'
      #   run: |
      #     choco install ninja cmake llvm ccache

      - name: Setup CCache
        shell: bash
        run: |
          if [ "$RUNNER_OS" = "Windows" ]; then
            echo "CCACHE_DIR=C:/Users/runneradmin/.ccache" >> $GITHUB_ENV
          else
            echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
          fi
          echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=500M" >> $GITHUB_ENV

      - name: Restore CCache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Configure CMake
        shell: bash
        run: |
          mkdir build
          cd build

          if [ "${RUNNER_OS}" = "Linux" ]; then
            EXTRA_OPTS="-DSIB_NET_PROXYGEN=ON"
          else
            EXTRA_OPTS=""
          fi

          cmake .. -G Ninja \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            ${EXTRA_OPTS} \
            ${{ matrix.cmake_compiler_options }}

      - name: Build
        shell: bash
        run: |
          cd build
          if [ "$(uname)" == "Darwin" ]; then
            CORES=$(sysctl -n hw.ncpu)
          else
            CORES=$(nproc)
          fi
          ninja -j$CORES

      - name: Run Tests
        shell: bash
        run: |
          cd build
          echo "Running sib_test"
          ./sib_test

      - name: Run Benchmarks
        shell: bash
        run: |
          cd build
          echo "Running sib_bench"
          ./sib_bench

  # android:
  #   name: android
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       abi: [armeabi-v7a, arm64-v8a, x86, x86_64]

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Install Android NDK
  #       uses: nttld/setup-ndk@v1
  #       with:
  #         ndk-version: r26d

  #     - name: Install CCache (Android job)
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y ccache

  #     - name: Configure Android CMake for ${{ matrix.abi }}
  #       run: |
  #         mkdir build-android-${{ matrix.abi }} && cd build-android-${{ matrix.abi }}
  #         cmake .. -G Ninja \
  #           -DCMAKE_SYSTEM_NAME=Android \
  #           -DCMAKE_ANDROID_NDK=$ANDROID_NDK_ROOT \
  #           -DCMAKE_ANDROID_ARCH_ABI=${{ matrix.abi }} \
  #           -DCMAKE_ANDROID_STL_TYPE=c++_static \
  #           -DCMAKE_ANDROID_NDK_TOOLCHAIN_VERSION=clang \
  #           -DCMAKE_CXX_SCAN_FOR_MODULES=OFF \
  #           -DCMAKE_C_COMPILER_LAUNCHER=ccache \
  #           -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
  #           -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
  #           -DSIB_NET_PROXYGEN=ON \
  #           -DCMAKE_BUILD_TYPE=Release

  #     - name: Build Android ${{ matrix.abi }}
  #       run: |
  #         cd build-android-${{ matrix.abi }}
  #         ninja -j$(nproc)

  # ios:
  #   name: iOS
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Install CCache (macOS)
  #       run: |
  #         brew install ccache

  #     - name: Setup CCache
  #       run: |
  #         echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
  #         echo "CCACHE_MAXSIZE=500M" >> $GITHUB_ENV
  #         echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

  #     - name: Restore CCache
  #       uses: actions/cache@v4
  #       with:
  #         path: ${{ env.CCACHE_DIR }}
  #         key: ios-ccache-${{ github.sha }}
  #         restore-keys: |
  #           ios-ccache-

  #     - name: Configure iOS Build
  #       run: |
  #         mkdir build-ios
  #         cd build-ios
  #         cmake .. -G Ninja \
  #           -DCMAKE_SYSTEM_NAME=iOS \
  #           -DCMAKE_OSX_ARCHITECTURES=arm64 \
  #           -DCMAKE_OSX_SYSROOT=$(xcrun --sdk iphoneos --show-sdk-path) \
  #           -DCMAKE_C_COMPILER=clang \
  #           -DCMAKE_CXX_COMPILER=clang++ \
  #           -DCMAKE_C_COMPILER_LAUNCHER=ccache \
  #           -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
  #           -DCMAKE_CXX_SCAN_FOR_MODULES=OFF \
  #           -DCMAKE_BUILD_TYPE=Release

  #     - name: Build iOS
  #       run: |
  #         cd build-ios
  #         CORES=$(sysctl -n hw.ncpu)
  #         ninja -j$CORES
