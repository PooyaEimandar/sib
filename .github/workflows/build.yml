name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  linux:
    name: Linux ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]

    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build nasm \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Configure Cargo for Cross
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p .cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> .cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml

      - name: Run Clippy
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          rustup component add clippy
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Build
        run: cargo build --release --target=${{ matrix.target }}

      - name: Test
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo test --release

  windows:
    name: Windows x86_64
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install ninja nasm -y

      - name: Setup Rust
        run: |
          rustup default stable
          rustup component add clippy

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build
        run: cargo build --release

      - name: Test
        run: cargo test --release

  android:
    name: Android ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          [armv7-linux-androideabi, aarch64-linux-android, x86_64-linux-android]

    steps:
      - uses: actions/checkout@v4

      - name: Add Android target
        run: rustup target add ${{ matrix.target }}

      - name: Install NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25b
          add-to-path: true

      - name: Install cargo-ndk
        run: cargo install cargo-ndk

      - name: Build
        run: cargo ndk -t ${{ matrix.target }} -o ./target build --release

  apple:
    name: Apple (macOS & iOS)
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: brew install cmake ninja

      - name: Setup Rust
        run: |
          rustup default stable
          rustup component add clippy
          rustup target add aarch64-apple-darwin
          rustup target add aarch64-apple-ios

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build for macOS (arm64)
        run: cargo build --release --target=aarch64-apple-darwin

      - name: Build for iOS (staticlib)
        run: |
          cargo install cargo-lipo
          cargo lipo --release --targets=aarch64-apple-ios
